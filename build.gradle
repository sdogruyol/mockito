//apply from: 'release.gradle'
ant.importBuild 'build.xml'

task printHelp << {
    println """
---------------------------
How to build mockito?
---------------------------
1. Use gradle. To see available tasks run './gradlew tasks' (or if you're on Windows: 'gradlew tasks')
2. Alternatively, use ant. Run ant -p to see available tasks.
   -actually, gradle script imports the ant build so either way you build the results should be more like the same :)

---------------------------
How to release mockito?
---------------------------
# [In progress] Use gradle. Run:
# gradlew release
# check-in any changes

---------------------------
More info.
---------------------------
We will move fully into gradle at some point. For now, ant import in gradle works for us just fine.
"""
}

task release {
    if (gradle.startParameter.taskNames == ['release']) {
        gradle.startParameter.taskNames = ['updateLicenseHeaders', 'checkDirtyChanges']
    }
}

gradle.taskGraph.whenReady {
    //validate the existence of project properties
    if (it.hasTask(':uploadToGoogle')) {
        assert project.hasProperty('googleUser') : "Google upload not possible - googleUser property not provided. Pass -PgoogleUser=someone via command line"
        assert project.hasProperty('googlePwd') : "Google upload not possible - googlePwd property not provided. Pass -PgooglePwd=secret via command line"

        assert project.uploadToGoogle.inputs
    }
}

task uploadToGoogle {
    def version = '1.9.0'
    mockitoZip = file("target/mockito-${version}.zip")
    mockitoAllJar = file("target/mockito-all-${version}.jar")

    validateInputExists = { assert mockitoZip.exists() && mockitoAllJar.exists() : "" +
        "Google upload not possible - no binaries to upload. Please run 'ant test.release release.maven' first.\n" +
        "" }

    inputs.files mockitoZip, mockitoAllJar
    doLast {
        ant {
            //declare ant task
            taskdef(name:"gcupload", classname:"net.bluecow.googlecode.ant.GoogleCodeUploadTask") {
                classpath {
                    fileset(dir: 'lib/build', includes: 'ant-googlecode-*.jar')
                }
            }

            //acquire the user/password (usually supplied via command line)
            def googleUser = project.getProperty('googleUser')
            def googlePwd  = project.getProperty('googlePwd')

            //upload zip
            logger.lifecycle "Uploading $mockitoZip ..."

            gcupload username:googleUser, password:googlePwd, projectname:"mockito",
                filename:mockitoZip, targetfilename:mockitoZip.name, summary:"All jars, source and javadocs",
                labels:"Featured"

            logger.lifecycle "Uploading $mockitoAllJar ..."

            //upload jar
            gcupload username:googleUser, password:googlePwd, projectname:"mockito",
                filename:mockitoAllJar, targetfilename:mockitoAllJar.name, summary:"Single jar, includes source",
                labels:"Featured"
        }
    }
}

task checkDirtyChanges << {
    //to be implemented
}

task updateLicenseHeaders << {
    def files = fileTree('test') + fileTree('src')
    files = files.filter { !it.name.endsWith('.html') && !it.name.endsWith('.txt')}

    logger.lifecycle("Updating licence headers in source... Found ${files.files.size()} files to check the license.")

    def header = """/*
 * Copyright (c) 2007 Mockito contributors
 * This program is made available under the terms of the MIT License.
 */
"""
    files.each { File file ->
        def currentHdr = /(?sm).*?\/\*.*?\*\/.*?package org\./
        def ignoreHdr = /NON-STANDARD LICENCE HEADER HERE - THAT'S OK/

        def content = file.text

        if (content =~ ignoreHdr) {
          //this means we're ok with non-standard header
        } else if (!(content =~ currentHdr)) {
          logger.lifecycle "missing header in: ${file} - prepending..."
          file.text = header + content
        } else if (!content.find(currentHdr)?.contains(header)) {
          logger.lifecycle "different header in: ${file} - replacing..."
          content = content.replaceFirst(currentHdr, header + "package org.")
          file.text = content
        }
    }
}

defaultTasks 'printHelp'